---

image: docker:19.03.12

services:
  - docker:19.03.12-dind

variables:
    ASSET_NAME: metacall-tarball-linux-amd64.tar.gz
    GHR_VERSION: 0.12.0
    # GH_TOKEN - from settings/ci_cd variables
    # GH_REPO - from settings/ci_cd variables

stages:
    # - prep
    # - test
    - publish

# build:
#   stage: prep
#   script:
#       # This seems to be needed by GitLab CI
#       - chmod 1777 /tmp
#       # Build the base image
#       - docker build -t metacall/distributable -f Dockerfile .
#       # Install the additional channels and pull (can't be cached)
#       - docker run --privileged --name tmp metacall/distributable sh -c 'guix pull'
#       # Commit changes
#       - docker commit tmp metacall/distributable && docker rm -f tmp
#       # Build dependencies
#       - docker run -d --privileged --name tmp metacall/distributable /metacall/scripts/deps.sh
#       # Commit changes
#       - docker commit tmp metacall/distributable && docker rm -f tmp
#       # Build tarball
#       - docker run --rm -v $PWD/out:/metacall/pack --privileged metacall/distributable /metacall/scripts/build.sh
#   only:
#     - tags
#   artifacts:
#     paths:
#       - out/
#     expire_in: 3h

# test:
#   stage: test
#   script:
#     # Generate a unique id for invalidating the cache of test layers
#     - CACHE_INVALIDATE=$(date +%s)
#     - docker build --build-arg CACHE_INVALIDATE=${CACHE_INVALIDATE} -t metacall/distributable_test:cli -f tests/cli/Dockerfile .
#     - docker build --build-arg CACHE_INVALIDATE=${CACHE_INVALIDATE} -t metacall/distributable_test:c -f tests/c/Dockerfile .
#     - docker build --build-arg CACHE_INVALIDATE=${CACHE_INVALIDATE} -t metacall/distributable_test:python -f tests/python/Dockerfile .
#     - docker build --build-arg CACHE_INVALIDATE=${CACHE_INVALIDATE} -t metacall/distributable_test:node -f tests/node/Dockerfile .
#     - docker build --build-arg CACHE_INVALIDATE=${CACHE_INVALIDATE} -t metacall/distributable_test:typescript -f tests/typescript/Dockerfile .
#   only:
#     - tags
#   needs:
#     - job: build
#       artifacts: true

publish-github:
  stage: publish
  script:
    # - apk --no-cache add curl git
    # - curl -sL https://github.com/tcnksm/ghr/releases/download/v${GHR_VERSION}/ghr_v${GHR_VERSION}_linux_amd64.tar.gz | tar zx
    # - chmod +x ghr_v${GHR_VERSION}_linux_amd64/ghr
    # - mv ghr_v${GHR_VERSION}_linux_amd64/ghr /usr/local/bin
    - export GH_REPO_OWNER=${GH_REPO%/*}
    - export GH_REPO_NAME=${GH_REPO#*/}
    # - export PREVIOUS_TAG=`git describe HEAD^1 --abbrev=0 --tags`
    # - export GIT_HISTORY=`git log --no-merges --format="- %s" ${PREVIOUS_TAG}..HEAD`
    # - if [[ "${PREVIOUS_TAG}" == "" ]]; then export GIT_HISTORY=`git log --no-merges --format="- %s"`; fi
    # - if [[ "${CI_COMMIT_TAG}" == "" ]]; then export CI_COMMIT_TAG=${PREVIOUS_TAG}; fi
    # - export RELEASE_DATE=`date '+%Y-%m-%d'`
    # - mv ${PWD}/out/tarball.tar.gz ${PWD}/out/${ASSET_NAME}
    - echo "MetaCall Distributable ${CI_COMMIT_TAG} [${RELEASE_DATE}] - ${GH_REPO_OWNER}/${GH_REPO_NAME}:${CI_COMMIT_SHA}"
    - if [[ "${GH_REPO}" == "metacall/distributable" ]]; then echo "GH_REPO is working!"; fi
    - echo "${GH_REPO_OWNER}"
    - echo "${GH_REPO_NAME}"
    # - touch ${PWD}/out/${ASSET_NAME}
    # - ghr -t ${GH_TOKEN} -u ${GH_REPO_OWNER} -r ${GH_REPO_NAME} -c ${CI_COMMIT_SHA} -n "MetaCall Distributable ${CI_COMMIT_TAG} [${RELEASE_DATE}]" -replace ${CI_COMMIT_TAG} ${PWD}/out/${ASSET_NAME}
  only:
    - tags
  # needs:
  #   - job: build
  #     artifacts: true
  #   - job: test
