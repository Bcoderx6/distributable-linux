;
;	MetaCall Distributable by Parra Studios
;	Distributable infrastructure for MetaCall.
;
;	Copyright (C) 2016 - 2019 Vicente Eduardo Ferrer Garcia <vic798@gmail.com>
;
;	Licensed under the Apache License, Version 2.0 (the "License");
;	you may not use this file except in compliance with the License.
;	You may obtain a copy of the License at
;
;		http://www.apache.org/licenses/LICENSE-2.0
;
;	Unless required by applicable law or agreed to in writing, software
;	distributed under the License is distributed on an "AS IS" BASIS,
;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;	See the License for the specific language governing permissions and
;	limitations under the License.
;

(define-module (gnu packages metacall)
  #:use-module (guix packages)
  #:use-module (guix git-download)
  #:use-module (guix utils)
  #:use-module (guix build-system cmake)
  #:use-module ((guix licenses) #:select (asl2.0))
  #:use-module (gnu packages))

; deps, core, cli


(define-public metacall
  (package
    (name "metacall")
    (version "4.1.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/assimp/assimp.git")
                    (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "1rhyqfhzifdj7yibyanph3rh13ykw3i98dnn8mz65j780472hw28"))))
    (build-system cmake-build-system)
    (inputs
     `(("zlib" ,zlib)))
    (home-page "http://www.assimp.org/")
    (synopsis "Asset import library")
    (description
     "The Open Asset Import Library loads more than 40 3D file formats into
one unified data structure.  Additionally, assimp features various mesh post
processing tools: normals and tangent space generation, triangulation, vertex
cache locality optimization, removal of degenerate primitives and duplicate
vertices, sorting by primitive type, merging of redundant materials and many
more.")
    (license asl2.0)))

; (define-public metacall
;   (package
;     (name "metacall")
;     (version "0.1.12")
;     (source (origin
;               (method git-fetch)
;               (uri (git-reference
;                     (url "https://github.com/metacall/core.git")
;                     (commit (string-append "v" version))))
;               (file-name (git-file-name name version))
;               (sha256
;                (base32
;                 "1ni7mnwsfd56cv7syfdg7jvz35iyb02ha76v7frl56nxgchz0v2i"))))
;     (build-system cmake-build-system)

; ;     (arguments
; ;       (let ((python-version (version-major+minor (package-version python))))
; ;        `(;; Test files are very large and not included in the release tarball.
; ;          #:tests? #f
; ;          #:configure-flags
; ;          (list "-DBUILD_SHARED_LIBS=ON"
; ;                "-DOPTION_BUILD_LOADERS=ON"
; ;                "-DOPTION_BUILD_LOADERS_MOCK=OFF"
; ;                "-DOPTION_BUILD_LOADERS_FILE=ON"
; ;                "-DOPTION_BUILD_LOADERS_PY=ON"
; ;                (string-append "-DPYTHON_LIBRARY=python" ,python-version "m")
; ;                (string-append "-DPYTHON_LIBPATH=" (assoc-ref %build-inputs "python")
; ;                               "/lib")
; ;                (string-append "-DPYTHON_INCLUDE_DIR=" (assoc-ref %build-inputs "python")
; ;                               "/include/python" ,python-version "m")
; ;                (string-append "-DPYTHON_VERSION=" ,python-version)
; ;                (string-append "-DPYTHON_EXECUTABLE=" (assoc-ref %build-inputs "python")
; ;                               "/bin/python" ,python-version)
; ;                "-DOPTION_BUILD_LOADERS_C=OFF"
; ;                "-DOPTION_BUILD_LOADERS_CS=OFF"
; ;                "-DOPTION_BUILD_LOADERS_RB=OFF"
; ;                "-DOPTION_BUILD_LOADERS_JS=OFF"
; ;                "-DOPTION_BUILD_LOADERS_JSM=OFF"
; ;                "-DOPTION_BUILD_LOADERS_NODE=OFF"
; ;                "-DOPTION_BUILD_LOADERS_RPC=OFF"
; ;                "-DOPTION_BUILD_LOADERS_WASM=OFF"

; ;                "-DOPTION_BUILD_SERIALS=ON"
; ;                "-DOPTION_BUILD_SERIALS_METACALL=OFF"
; ;                "-DOPTION_BUILD_SERIALS_RAPID_JSON=ON"

; ;                "-DOPTION_BUILD_DETOURS=OFF"
; ;                "-DOPTION_FORK_SAFE=OFF"
; ;                "-DOPTION_THREAD_SAFE=OFF"

; ; ; TODO: Overwrite this ?
; ; ; -DCONFIGURATION_INSTALL_PATH=\"${CMAKE_INSTALL_PREFIX}/${INSTALL_DATA}/configurations/global.json\"
; ; ; -DSERIAL_LIBRARY_INSTALL_PATH=\"${CMAKE_INSTALL_PREFIX}/${INSTALL_SHARED}\"
; ; ; -DLOADER_LIBRARY_INSTALL_PATH=\"${CMAKE_INSTALL_PREFIX}/${INSTALL_SHARED}\"
; ; ; -DDETOUR_LIBRARY_INSTALL_PATH=\"${CMAKE_INSTALL_PREFIX}/${INSTALL_SHARED}\"
; ; ; -DPORT_LIBRARY_INSTALL_PATH=\"${CMAKE_INSTALL_PREFIX}/${INSTALL_SHARED}\"

; ;                "-DOPTION_BUILD_DOCS=OFF"
; ;                "-DOPTION_BUILD_BENCHMARKS=OFF"
; ;                "-DOPTION_BUILD_TESTS=OFF"
; ;                "-DOPTION_BUILD_SCRIPTS=OFF"
; ;                "-DOPTION_COVERAGE=OFF"
; ;                "-DOPTION_BUILD_EXAMPLES=OFF"
; ;                "-DOPTION_BUILD_DIST_LIBS=ON"
; ;                "-DOPTION_BUILD_PORTS=ON"
; ;                "-DCMAKE_BUILD_TYPE=Release")
; ; ;          #:phases
; ; ;          (modify-phases %standard-phases
; ; ;            ;; XXX This file doesn't exist in the Git sources but will probably
; ; ;            ;; exist in the eventual 2.80 source tarball.
; ; ; ;           (add-after 'unpack 'fix-broken-import
; ; ; ;             (lambda _
; ; ; ;               (substitute* "release/scripts/addons/io_scene_fbx/json2fbx.py"
; ; ; ;                 (("import encode_bin") "from . import encode_bin"))
; ; ; ;               #t))
; ; ;            (add-after 'set-paths 'add-ilmbase-include-path
; ; ;              (lambda* (#:key inputs #:allow-other-keys)
; ; ;                ;; OpenEXR propagates ilmbase, but its include files do not appear
; ; ;                ;; in the CPATH, so we need to add "$ilmbase/include/OpenEXR/" to
; ; ;                ;; the CPATH to satisfy the dependency on "half.h".
; ; ;                (setenv "CPATH"
; ; ;                        (string-append (assoc-ref inputs "ilmbase")
; ; ;                                       "/include/OpenEXR"
; ; ;                                       ":" (or (getenv "CPATH") "")))
; ; ;                #t)))

; ;                )))
; ;     (inputs
; ;      `(;("boost" ,boost)
; ;        ("python" ,python)))


;     (home-page "https://metacall.io/")
;     (synopsis "Inter-language foreign function interface call library")
;     (description "METACALL is a library that allows calling functions,
; methods or procedures between programming languages.
; With METACALL you can transparently execute code from / to any
; programming language, for example, call Python code from JavaScript code")
;     (license asl2.0)))
